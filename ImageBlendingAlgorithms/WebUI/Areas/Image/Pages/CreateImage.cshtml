@page
@using WebUI.Areas.Image
@model CreateImageModel
@{
    Layout = "_Layout";
}

@section scripts{
    @await Html.PartialAsync("_ValidationScriptsPartial")
}

<form method="post">
    @Html.AntiForgeryToken()
    <div class="form-row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="imageHeightInput">Height:</label>
                <input type="number" class="form-control" id="imageHeightInput" name="Height" value="@(Model.Height > 0 ? @Model.Height.ToString() : string.Empty)" placeholder="1080" min="10" max="2160">
                @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="imageWidthInput">Width:</label>
                <input type="number" class="form-control" id="imageWidthInput" name="Width" value="@(Model.Width > 0 ? @Model.Width.ToString() : string.Empty)" placeholder="1920" min="10" max="2160">
                @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="imageResultHeightInput">Result Height:</label>
                <input type="number" class="form-control" id="imageResultHeightInput" name="ResultHeight" value="@(Model.ResultHeight > 0 ? @Model.ResultHeight.ToString() : string.Empty)" placeholder="1080" min="10" max="2160">
                @Html.ValidationMessageFor(model => model.ResultHeight, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="imageResultWidthInput">Result Width:</label>
                <input type="number" class="form-control" id="imageResultWidthInput" name="ResultWidth" value="@(Model.ResultWidth > 0 ? @Model.ResultWidth.ToString() : string.Empty)" placeholder="1920" min="10" max="2160">
                @Html.ValidationMessageFor(model => model.ResultWidth, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="imagesCountInput">Images count:</label>
                <input type="number" class="form-control" id="imagesCountInput" name="ImagesCount" value="@(Model.ImagesCount > 0 ? @Model.ImagesCount.ToString() : string.Empty)" placeholder="3" min="2" max="10">
                @Html.ValidationMessageFor(model => model.ImagesCount, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="imageCyclesCountInput">Cycles count:</label>
                <input type="number" class="form-control" id="imageCyclesCountInput" name="CyclesCount" value="@(Model.CyclesCount > 0 ? @Model.CyclesCount.ToString() : string.Empty)" placeholder="1" min="1" max="10">
                @Html.ValidationMessageFor(model => model.CyclesCount, "", new { @class = "text-danger" })
            </div>
            <div class="form-group form-check">
                @Html.CheckBoxFor(model => model.IsRoundTrip)
                <label class="form-check-label" for="IsRoundTrip">Round trip</label>
            </div>
        </div>
        <div class="col-md-6">
            @{
                for(var i = 0; i < Model.AlgorithmsVMs.Count; i++)
                {
                    <div class="form-group form-check">
                        @Html.HiddenFor(model => model.AlgorithmsVMs[i].Name)
                        @Html.CheckBoxFor(model => model.AlgorithmsVMs[i].IsSelected)
                        <label class="form-check-label" for="AlgorithmsVMs[@i].IsSelected">@Model.AlgorithmsVMs[i].Name</label>
                    </div>
                }
            }
        </div>
        <div class="form-group row">
            <div class="col-sm-7 offset-sm-3">
                <button class="btn btn-primary" id="submit">Submit</button>
            </div>
        </div>
    </div>
</form>

@if(!string.IsNullOrWhiteSpace((string) ViewData["ResImagePath"] ?? ""))
{
    <image id="resultImage" src='@ViewData["ResImagePath"]' style="width:80%"></image>
}